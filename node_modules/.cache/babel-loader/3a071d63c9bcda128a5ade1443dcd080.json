{"ast":null,"code":"var _jsxFileName = \"/Users/bilalsarimeseli/Desktop/clicky_memory_game_react/src/App.js\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport './App.css';\nimport Card from './components/Card/Card';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      score: 0,\n      highscore: 0\n    };\n\n    this.gameOver = () => {\n      if (this.state.score > this.state.highscore) {\n        this.setState({\n          highscore: this.state.score\n        }, function () {\n          console.log(this.state.highscore);\n        });\n      }\n\n      this.state.cards.forEach(card => {\n        card.count = 0;\n      });\n      alert(\"Game Over :( \\nscore: \".concat(this.state.score));\n      this.setState({\n        score: 0\n      });\n      return true;\n    };\n\n    this.clickCount = id => {\n      this.state.cards.find((o, i) => {\n        if (o.id === id) {\n          if (o.count === 0) {\n            let cardsCopy = [...this.state.cards];\n            cardsCopy[i].count = 1;\n            cardsCopy.sort(() => Math.random() - 0.5);\n\n            if (this.state.score + 1 > this.state.highscore) {\n              this.setState({\n                highscore: this.state.score + 1,\n                cards: cardsCopy\n              }, function () {\n                console.log(this.state.highscore);\n              });\n            } else {\n              this.setState({\n                score: this.state.score + 1,\n                cards: cardsCopy\n              }, function () {\n                console.log(this.state.score);\n              });\n            }\n\n            return true;\n          } else {\n            let updateCards = this.state.cards.map(card => {\n              card.count = 0;\n              return card;\n            });\n            this.setState({\n              cards: updateCards,\n              score: 0\n            });\n          }\n        }\n      });\n    };\n  }\n\n  // Map over this.state.cards and render a cardCard component for each card object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Clicky Game\"), this.state.cards.map(card => React.createElement(Card, {\n      clickCount: this.clickCount,\n      id: card.id,\n      key: card.id,\n      image: card.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bilalsarimeseli/Desktop/clicky_memory_game_react/src/App.js"],"names":["React","Component","Wrapper","Header","cards","Card","App","state","score","highscore","gameOver","setState","console","log","forEach","card","count","alert","clickCount","id","find","o","i","cardsCopy","sort","Math","random","updateCards","map","render","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport './App.css';\nimport Card from './components/Card/Card';\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n\n    return true;\n  }\n\n  \n  \n    \n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(o.count === 0){\n          let cardsCopy = [...this.state.cards]\n\n           cardsCopy[i].count = 1;\n          cardsCopy.sort(() => Math.random() - 0.5)\n\n          if (this.state.score + 1 > this.state.highscore) {\n            this.setState({highscore: this.state.score + 1, cards : cardsCopy}, function() {\n              console.log(this.state.highscore);\n            });\n          } else {\n            this.setState({score : this.state.score + 1, cards : cardsCopy}, function(){\n              console.log(this.state.score);\n            });\n          } \n          \n\n          return true; \n        } \n        else {\n          let updateCards = this.state.cards.map(card => {\n            card.count = 0;\n            return card;\n          });\n          this.setState({\n            cards: updateCards,\n            score: 0\n          })\n\n        }\n      }\n    });\n  }\n  // Map over this.state.cards and render a cardCard component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n  \n\n\n\n"]},"metadata":{},"sourceType":"module"}