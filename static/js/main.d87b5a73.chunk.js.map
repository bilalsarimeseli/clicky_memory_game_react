{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Header/Header.js","components/Card/Card.js","App.js","index.js"],"names":["Wrapper","props","className","children","Header","score","highscore","Card","onClick","clickCount","id","alt","name","src","image","App","state","cards","gameOver","setState","console","log","this","forEach","card","count","alert","find","o","i","cardsCopy","sort","Math","random","updateCards","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"+nEAKeA,G,MAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,YCS1CC,G,MATA,SAAAH,GAAK,OAClB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAASD,EAAME,UAC9B,yBAAKD,UAAU,UAAf,UACUD,EAAMI,MADhB,eACmCJ,EAAMK,c,OCI9BC,G,YARF,SAAAN,GAAK,OAChB,yBAAKC,UAAU,OAAOM,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MAC1D,yBAAKR,UAAU,iBACb,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,YCkFxBC,E,2MA/EbC,MAAQ,CACNC,QACAZ,MAAO,EACPC,UAAW,G,EAGbY,SAAW,WAYT,OAXI,EAAKF,MAAMX,MAAQ,EAAKW,MAAMV,WAChC,EAAKa,SAAS,CAACb,UAAW,EAAKU,MAAMX,QAAQ,WAC3Ce,QAAQC,IAAIC,KAAKN,MAAMV,cAG3B,EAAKU,MAAMC,MAAMM,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAEfC,MAAM,yBAAD,OAA0B,EAAKV,MAAMX,QAC1C,EAAKc,SAAS,CAACd,MAAO,KAEf,G,EAOTI,WAAa,SAAAC,GACX,EAAKM,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAElB,KAAOA,EAAI,CACf,GAAe,IAAZkB,EAAEH,MAAY,CACf,IAAIK,EAAS,YAAO,EAAKd,MAAMC,OAgB/B,OAdCa,EAAUD,GAAGJ,MAAQ,EACtBK,EAAUC,MAAK,kBAAMC,KAAKC,SAAW,MAEjC,EAAKjB,MAAMX,MAAQ,EAAI,EAAKW,MAAMV,UACpC,EAAKa,SAAS,CAACb,UAAW,EAAKU,MAAMX,MAAQ,EAAGY,MAAQa,IAAY,WAClEV,QAAQC,IAAIC,KAAKN,MAAMV,cAGzB,EAAKa,SAAS,CAACd,MAAQ,EAAKW,MAAMX,MAAQ,EAAGY,MAAQa,IAAY,WAC/DV,QAAQC,IAAIC,KAAKN,MAAMX,WAKpB,EAGP,IAAI6B,EAAc,EAAKlB,MAAMC,MAAMkB,KAAI,SAAAX,GAErC,OADAA,EAAKC,MAAQ,EACND,KAET,EAAKL,SAAS,CACZF,MAAOiB,EACP7B,MAAO,S,wEAQP,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,MAAOiB,KAAKN,MAAMX,MAAOC,UAAWgB,KAAKN,MAAMV,WAAvD,eACCgB,KAAKN,MAAMC,MAAMkB,KAAI,SAAAX,GAAI,OACxB,kBAAC,EAAD,CACEf,WAAY,EAAKA,WACjBC,GAAIc,EAAKd,GACT0B,IAAKZ,EAAKd,GACVI,MAAOU,EAAKV,gB,GAzENuB,a,MCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d87b5a73.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n  <div className=\"header\">\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} Highscore: {props.highscore}\n    </div>\n  </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport './App.css';\nimport Card from './components/Card/Card';\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n\n    return true;\n  }\n\n  \n  \n    \n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(o.count === 0){\n          let cardsCopy = [...this.state.cards]\n\n           cardsCopy[i].count = 1;\n          cardsCopy.sort(() => Math.random() - 0.5)\n\n          if (this.state.score + 1 > this.state.highscore) {\n            this.setState({highscore: this.state.score + 1, cards : cardsCopy}, function() {\n              console.log(this.state.highscore);\n            });\n          } else {\n            this.setState({score : this.state.score + 1, cards : cardsCopy}, function(){\n              console.log(this.state.score);\n            });\n          } \n          \n\n          return true; \n        } \n        else {\n          let updateCards = this.state.cards.map(card => {\n            card.count = 0;\n            return card;\n          });\n          this.setState({\n            cards: updateCards,\n            score: 0\n          })\n\n        }\n      }\n    });\n  }\n  // Map over this.state.cards and render a cardCard component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n  \n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}